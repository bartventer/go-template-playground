{"version":3,"file":"monaco-editor-esm-vs-base-browser-defaultWorkerFactory-BatFPzyW.js","sources":["../../../node_modules/monaco-editor/esm/vs/base/browser/defaultWorkerFactory.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from './trustedTypes.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { COI, FileAccess } from '../common/network.js';\nimport { logOnceWebWorkerWarning, SimpleWorkerClient } from '../common/worker/simpleWorker.js';\nimport { Disposable, toDisposable } from '../common/lifecycle.js';\nimport { coalesce } from '../common/arrays.js';\nimport { getNLSLanguage, getNLSMessages } from '../../nls.js';\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n// ESM-uncomment-end\n// Reuse the trusted types policy defined from worker bootstrap\n// when available.\n// Refs https://github.com/microsoft/vscode/issues/222193\nlet ttPolicy;\nif (typeof self === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope' && globalThis.workerttPolicy !== undefined) {\n    ttPolicy = globalThis.workerttPolicy;\n}\nelse {\n    ttPolicy = createTrustedTypesPolicy('defaultWorkerFactory', { createScriptURL: value => value });\n}\nfunction getWorker(esmWorkerLocation, label) {\n    const monacoEnvironment = globalThis.MonacoEnvironment;\n    if (monacoEnvironment) {\n        if (typeof monacoEnvironment.getWorker === 'function') {\n            return monacoEnvironment.getWorker('workerMain.js', label);\n        }\n        if (typeof monacoEnvironment.getWorkerUrl === 'function') {\n            const workerUrl = monacoEnvironment.getWorkerUrl('workerMain.js', label);\n            return new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, { name: label, type: isESM ? 'module' : undefined });\n        }\n    }\n    // ESM-comment-begin\n    // \tif (typeof require === 'function') {\n    // \t\tconst workerMainLocation = require.toUrl('vs/base/worker/workerMain.js'); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n    // \t\tconst factoryModuleId = 'vs/base/worker/defaultWorkerFactory.js';\n    // \t\tconst workerBaseUrl = require.toUrl(factoryModuleId).slice(0, -factoryModuleId.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n    // \t\tconst workerUrl = getWorkerBootstrapUrl(label, workerMainLocation, workerBaseUrl);\n    // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label, type: isESM ? 'module' : undefined });\n    // \t}\n    // ESM-comment-end\n    if (esmWorkerLocation) {\n        const workerUrl = getWorkerBootstrapUrl(label, esmWorkerLocation.toString(true));\n        const worker = new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, { name: label, type: isESM ? 'module' : undefined });\n        if (isESM) {\n            return whenESMWorkerReady(worker);\n        }\n        else {\n            return worker;\n        }\n    }\n    throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);\n}\nfunction getWorkerBootstrapUrl(label, workerScriptUrl, workerBaseUrl) {\n    const workerScriptUrlIsAbsolute = /^((http:)|(https:)|(file:)|(vscode-file:))/.test(workerScriptUrl);\n    if (workerScriptUrlIsAbsolute && workerScriptUrl.substring(0, globalThis.origin.length) !== globalThis.origin) {\n        // this is the cross-origin case\n        // i.e. the webpage is running at a different origin than where the scripts are loaded from\n    }\n    else {\n        const start = workerScriptUrl.lastIndexOf('?');\n        const end = workerScriptUrl.lastIndexOf('#', start);\n        const params = start > 0\n            ? new URLSearchParams(workerScriptUrl.substring(start + 1, ~end ? end : undefined))\n            : new URLSearchParams();\n        COI.addSearchParam(params, true, true);\n        const search = params.toString();\n        if (!search) {\n            workerScriptUrl = `${workerScriptUrl}#${label}`;\n        }\n        else {\n            workerScriptUrl = `${workerScriptUrl}?${params.toString()}#${label}`;\n        }\n    }\n    if (!isESM && !workerScriptUrlIsAbsolute) {\n        // we have to convert relative script URLs to the origin because importScripts\n        // does not work unless the script URL is absolute\n        workerScriptUrl = new URL(workerScriptUrl, globalThis.origin).toString();\n    }\n    const blob = new Blob([coalesce([\n            `/*${label}*/`,\n            workerBaseUrl ? `globalThis.MonacoEnvironment = { baseUrl: '${workerBaseUrl}' };` : undefined,\n            `globalThis._VSCODE_NLS_MESSAGES = ${JSON.stringify(getNLSMessages())};`,\n            `globalThis._VSCODE_NLS_LANGUAGE = ${JSON.stringify(getNLSLanguage())};`,\n            `globalThis._VSCODE_FILE_ROOT = '${globalThis._VSCODE_FILE_ROOT}';`,\n            `const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });`,\n            `globalThis.workerttPolicy = ttPolicy;`,\n            isESM ? `await import(ttPolicy?.createScriptURL('${workerScriptUrl}') ?? '${workerScriptUrl}');` : `importScripts(ttPolicy?.createScriptURL('${workerScriptUrl}') ?? '${workerScriptUrl}');`,\n            isESM ? `globalThis.postMessage({ type: 'vscode-worker-ready' });` : undefined, // in ESM signal we are ready after the async import\n            `/*${label}*/`\n        ]).join('')], { type: 'application/javascript' });\n    return URL.createObjectURL(blob);\n}\nfunction whenESMWorkerReady(worker) {\n    return new Promise((resolve, reject) => {\n        worker.onmessage = function (e) {\n            if (e.data.type === 'vscode-worker-ready') {\n                worker.onmessage = null;\n                resolve(worker);\n            }\n        };\n        worker.onerror = reject;\n    });\n}\nfunction isPromiseLike(obj) {\n    if (typeof obj.then === 'function') {\n        return true;\n    }\n    return false;\n}\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\nclass WebWorker extends Disposable {\n    constructor(esmWorkerLocation, amdModuleId, id, label, onMessageCallback, onErrorCallback) {\n        super();\n        this.id = id;\n        this.label = label;\n        const workerOrPromise = getWorker(esmWorkerLocation, label);\n        if (isPromiseLike(workerOrPromise)) {\n            this.worker = workerOrPromise;\n        }\n        else {\n            this.worker = Promise.resolve(workerOrPromise);\n        }\n        this.postMessage(amdModuleId, []);\n        this.worker.then((w) => {\n            w.onmessage = function (ev) {\n                onMessageCallback(ev.data);\n            };\n            w.onmessageerror = onErrorCallback;\n            if (typeof w.addEventListener === 'function') {\n                w.addEventListener('error', onErrorCallback);\n            }\n        });\n        this._register(toDisposable(() => {\n            this.worker?.then(w => {\n                w.onmessage = null;\n                w.onmessageerror = null;\n                w.removeEventListener('error', onErrorCallback);\n                w.terminate();\n            });\n            this.worker = null;\n        }));\n    }\n    getId() {\n        return this.id;\n    }\n    postMessage(message, transfer) {\n        this.worker?.then(w => {\n            try {\n                w.postMessage(message, transfer);\n            }\n            catch (err) {\n                onUnexpectedError(err);\n                onUnexpectedError(new Error(`FAILED to post message to '${this.label}'-worker`, { cause: err }));\n            }\n        });\n    }\n}\nexport class WorkerDescriptor {\n    constructor(amdModuleId, label) {\n        this.amdModuleId = amdModuleId;\n        this.label = label;\n        this.esmModuleLocation = (isESM ? FileAccess.asBrowserUri(`${amdModuleId}.esm.js`) : undefined);\n    }\n}\nclass DefaultWorkerFactory {\n    static { this.LAST_WORKER_ID = 0; }\n    constructor() {\n        this._webWorkerFailedBeforeError = false;\n    }\n    create(desc, onMessageCallback, onErrorCallback) {\n        const workerId = (++DefaultWorkerFactory.LAST_WORKER_ID);\n        if (this._webWorkerFailedBeforeError) {\n            throw this._webWorkerFailedBeforeError;\n        }\n        return new WebWorker(desc.esmModuleLocation, desc.amdModuleId, workerId, desc.label || 'anonymous' + workerId, onMessageCallback, (err) => {\n            logOnceWebWorkerWarning(err);\n            this._webWorkerFailedBeforeError = err;\n            onErrorCallback(err);\n        });\n    }\n}\nexport function createWebWorker(arg0, arg1) {\n    const workerDescriptor = (typeof arg0 === 'string' ? new WorkerDescriptor(arg0, arg1) : arg0);\n    return new SimpleWorkerClient(new DefaultWorkerFactory(), workerDescriptor);\n}\n"],"names":["createTrustedTypesPolicy","logOnceWebWorkerWarning","Disposable","toDisposable","onUnexpectedError","COI","coalesce","getNLSMessages","getNLSLanguage","SimpleWorkerClient","FileAccess","ttPolicy","value","getWorker","esmWorkerLocation","label","monacoEnvironment","workerUrl","getWorkerBootstrapUrl","worker","whenESMWorkerReady","workerScriptUrl","workerBaseUrl","start","end","params","blob","resolve","reject","e","isPromiseLike","obj","WebWorker","amdModuleId","id","onMessageCallback","onErrorCallback","workerOrPromise","w","ev","_a","message","transfer","err","WorkerDescriptor","_DefaultWorkerFactory","desc","workerId","DefaultWorkerFactory","createWebWorker","arg0","arg1","workerDescriptor"],"mappings":"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","x_google_ignoreList":[0]}