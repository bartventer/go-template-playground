{"version":3,"file":"monaco-editor-esm-vs-base-browser-pixelRatio-Bpk22H8X.js","sources":["../../../node_modules/monaco-editor/esm/vs/base/browser/pixelRatio.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getWindowId, onDidUnregisterWindow } from './dom.js';\nimport { Emitter, Event } from '../common/event.js';\nimport { Disposable, markAsSingleton } from '../common/lifecycle.js';\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes\n */\nclass DevicePixelRatioMonitor extends Disposable {\n    constructor(targetWindow) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._listener = () => this._handleChange(targetWindow, true);\n        this._mediaQueryList = null;\n        this._handleChange(targetWindow, false);\n    }\n    _handleChange(targetWindow, fireEvent) {\n        this._mediaQueryList?.removeEventListener('change', this._listener);\n        this._mediaQueryList = targetWindow.matchMedia(`(resolution: ${targetWindow.devicePixelRatio}dppx)`);\n        this._mediaQueryList.addEventListener('change', this._listener);\n        if (fireEvent) {\n            this._onDidChange.fire();\n        }\n    }\n}\nclass PixelRatioMonitorImpl extends Disposable {\n    get value() {\n        return this._value;\n    }\n    constructor(targetWindow) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._value = this._getPixelRatio(targetWindow);\n        const dprMonitor = this._register(new DevicePixelRatioMonitor(targetWindow));\n        this._register(dprMonitor.onDidChange(() => {\n            this._value = this._getPixelRatio(targetWindow);\n            this._onDidChange.fire(this._value);\n        }));\n    }\n    _getPixelRatio(targetWindow) {\n        const ctx = document.createElement('canvas').getContext('2d');\n        const dpr = targetWindow.devicePixelRatio || 1;\n        const bsr = ctx.webkitBackingStorePixelRatio ||\n            ctx.mozBackingStorePixelRatio ||\n            ctx.msBackingStorePixelRatio ||\n            ctx.oBackingStorePixelRatio ||\n            ctx.backingStorePixelRatio || 1;\n        return dpr / bsr;\n    }\n}\nclass PixelRatioMonitorFacade {\n    constructor() {\n        this.mapWindowIdToPixelRatioMonitor = new Map();\n    }\n    _getOrCreatePixelRatioMonitor(targetWindow) {\n        const targetWindowId = getWindowId(targetWindow);\n        let pixelRatioMonitor = this.mapWindowIdToPixelRatioMonitor.get(targetWindowId);\n        if (!pixelRatioMonitor) {\n            pixelRatioMonitor = markAsSingleton(new PixelRatioMonitorImpl(targetWindow));\n            this.mapWindowIdToPixelRatioMonitor.set(targetWindowId, pixelRatioMonitor);\n            markAsSingleton(Event.once(onDidUnregisterWindow)(({ vscodeWindowId }) => {\n                if (vscodeWindowId === targetWindowId) {\n                    pixelRatioMonitor?.dispose();\n                    this.mapWindowIdToPixelRatioMonitor.delete(targetWindowId);\n                }\n            }));\n        }\n        return pixelRatioMonitor;\n    }\n    getInstance(targetWindow) {\n        return this._getOrCreatePixelRatioMonitor(targetWindow);\n    }\n}\n/**\n * Returns the pixel ratio.\n *\n * This is useful for rendering <canvas> elements at native screen resolution or for being used as\n * a cache key when storing font measurements. Fonts might render differently depending on resolution\n * and any measurements need to be discarded for example when a window is moved from a monitor to another.\n */\nexport const PixelRatio = new PixelRatioMonitorFacade();\n"],"names":["getWindowId","onDidUnregisterWindow","markAsSingleton","Event","Disposable","Emitter","DevicePixelRatioMonitor","targetWindow","fireEvent","_a","PixelRatioMonitorImpl","dprMonitor","ctx","dpr","bsr","PixelRatioMonitorFacade","targetWindowId","pixelRatioMonitor","vscodeWindowId","PixelRatio"],"mappings":"AAAA,OAAA,KAAAA,EAAA,KAAAC,MAAA,sDAAA,OAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,MAAA,0CAUA,MAAMC,UAAgCF,CAAW,CAC7C,YAAYG,EAAc,CACtB,MAAO,EACP,KAAK,aAAe,KAAK,UAAU,IAAIF,CAAS,EAChD,KAAK,YAAc,KAAK,aAAa,MACrC,KAAK,UAAY,IAAM,KAAK,cAAcE,EAAc,EAAI,EAC5D,KAAK,gBAAkB,KACvB,KAAK,cAAcA,EAAc,EAAK,CAC9C,CACI,cAAcA,EAAcC,EAAW,CAnB3C,IAAAC,GAoBQA,EAAA,KAAK,kBAAL,MAAAA,EAAsB,oBAAoB,SAAU,KAAK,WACzD,KAAK,gBAAkBF,EAAa,WAAW,gBAAgBA,EAAa,gBAAgB,OAAO,EACnG,KAAK,gBAAgB,iBAAiB,SAAU,KAAK,SAAS,EAC1DC,GACA,KAAK,aAAa,KAAM,CAEpC,CACA,CACA,MAAME,UAA8BN,CAAW,CAC3C,IAAI,OAAQ,CACR,OAAO,KAAK,MACpB,CACI,YAAYG,EAAc,CACtB,MAAO,EACP,KAAK,aAAe,KAAK,UAAU,IAAIF,CAAS,EAChD,KAAK,YAAc,KAAK,aAAa,MACrC,KAAK,OAAS,KAAK,eAAeE,CAAY,EAC9C,MAAMI,EAAa,KAAK,UAAU,IAAIL,EAAwBC,CAAY,CAAC,EAC3E,KAAK,UAAUI,EAAW,YAAY,IAAM,CACxC,KAAK,OAAS,KAAK,eAAeJ,CAAY,EAC9C,KAAK,aAAa,KAAK,KAAK,MAAM,CAC9C,CAAS,CAAC,CACV,CACI,eAAeA,EAAc,CACzB,MAAMK,EAAM,SAAS,cAAc,QAAQ,EAAE,WAAW,IAAI,EACtDC,EAAMN,EAAa,kBAAoB,EACvCO,EAAMF,EAAI,8BACZA,EAAI,2BACJA,EAAI,0BACJA,EAAI,yBACJA,EAAI,wBAA0B,EAClC,OAAOC,EAAMC,CACrB,CACA,CACA,MAAMC,CAAwB,CAC1B,aAAc,CACV,KAAK,+BAAiC,IAAI,GAClD,CACI,8BAA8BR,EAAc,CACxC,MAAMS,EAAiBhB,EAAYO,CAAY,EAC/C,IAAIU,EAAoB,KAAK,+BAA+B,IAAID,CAAc,EAC9E,OAAKC,IACDA,EAAoBf,EAAgB,IAAIQ,EAAsBH,CAAY,CAAC,EAC3E,KAAK,+BAA+B,IAAIS,EAAgBC,CAAiB,EACzEf,EAAgBC,EAAM,KAAKF,CAAqB,EAAE,CAAC,CAAE,eAAAiB,KAAqB,CAClEA,IAAmBF,IACnBC,GAAA,MAAAA,EAAmB,UACnB,KAAK,+BAA+B,OAAOD,CAAc,EAE7E,CAAa,CAAC,GAECC,CACf,CACI,YAAYV,EAAc,CACtB,OAAO,KAAK,8BAA8BA,CAAY,CAC9D,CACA,CAQY,MAACY,EAAa,IAAIJ","x_google_ignoreList":[0]}